{"ast":null,"code":"var _jsxFileName = \"/home/saloni/Documents/react/streams/client/src/components/streams/StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm, clearSubmitErrors } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { createStream } from '../../actions';\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: className,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 13\n        }\n      }, label), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 13\n        }\n      })), this.renderError(meta));\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"field\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 21\n        }\n      }, label), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, input, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 17\n        }\n      })));\n    }\n  }\n\n  onSubmit(formValues) {\n    console.log(formValues);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"Enter title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"Enter description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const error = {};\n\n  if (!formValues.title) {\n    clearSubmitErrors.title = 'You must enter title';\n  }\n\n  if (!formValues.description) {\n    clearSubmitErrors.description = 'You must enter description';\n  }\n\n  return errors;\n};\n\nconst formWrapped = reduxForm({\n  form: 'streamCreate',\n  validate\n})(StreamCreate);\nexport default connect();","map":{"version":3,"sources":["/home/saloni/Documents/react/streams/client/src/components/streams/StreamCreate.js"],"names":["React","Field","reduxForm","clearSubmitErrors","connect","createStream","StreamCreate","Component","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","formValues","console","log","render","props","handleSubmit","validate","title","description","errors","formWrapped","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,EAAcC,SAAd,EAAyBC,iBAAzB,QAAiD,YAAjD;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,YAAR,QAA2B,eAA3B;;AAEA,MAAMC,YAAN,SAA2BN,KAAK,CAACO,SAAjC,CAA0C;AAAA;AAAA;;AAAA,SAY1CC,WAZ0C,GAY9B,CAAC;AAACC,MAAAA,KAAD;AAAOC,MAAAA,KAAP;AAAaC,MAAAA;AAAb,KAAD,KAAuB;AAC/B,YAAMC,SAAS,GAAG,SAAQD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,OAAnB,GAA6B,OAA7B,GAAsC,EAAG,EAAnE;AACA,0BACI;AAAK,QAAA,SAAS,EAAEF,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQF,KAAR,CADJ,eAEI,+CAAWD,KAAX;AAAkB,QAAA,YAAY,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFJ,EAGK,KAAKM,WAAL,CAAiBJ,IAAjB,CAHL,CADJ;AAQH,KAtByC;AAAA;;AACtCI,EAAAA,WAAW,CAAC;AAACF,IAAAA,KAAD;AAAOC,IAAAA;AAAP,GAAD,EAAiB;AACxB,QAAGA,OAAO,IAAID,KAAd,EAAoB;AAChB,0BACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQH,KAAR,CADJ,eAEA,+CAAWD,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFA,CADJ;AAMP;AACJ;;AAcDO,EAAAA,QAAQ,CAACC,UAAD,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACC;;AAGLG,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAM,MAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKN,QAA7B,CAAhB;AAAwD,MAAA,SAAS,EAAC,eAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAE,KAAKR,WAApC;AAAiD,MAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,aAAZ;AAA0B,MAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,MAAA,KAAK,EAAC,mBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAGI;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,CADJ;AAOH;;AArCqC;;AAwC1C,MAAMe,QAAQ,GAACN,UAAU,IAAE;AACvB,QAAMJ,KAAK,GAAC,EAAZ;;AACA,MAAG,CAACI,UAAU,CAACO,KAAf,EAAqB;AACjBrB,IAAAA,iBAAiB,CAACqB,KAAlB,GAAwB,sBAAxB;AACH;;AACD,MAAG,CAACP,UAAU,CAACQ,WAAf,EAA2B;AACvBtB,IAAAA,iBAAiB,CAACsB,WAAlB,GAA8B,4BAA9B;AACH;;AACD,SAAOC,MAAP;AACH,CATD;;AAWA,MAAMC,WAAW,GAAEzB,SAAS,CAAC;AACzB0B,EAAAA,IAAI,EAAC,cADoB;AAEzBL,EAAAA;AAFyB,CAAD,CAAT,CAGfjB,YAHe,CAAnB;AAKA,eAAeF,OAAO,EAAtB","sourcesContent":["import React from 'react';\nimport {Field,reduxForm, clearSubmitErrors} from 'redux-form';\nimport {connect} from 'react-redux';\nimport {createStream} from '../../actions';\n\nclass StreamCreate extends React.Component{\n    renderError({error,touched}){\n        if(touched && error){\n            return (\n                <div className=\"field\">\n                    <label>{label}</label>\n                <input {...input} />\n                </div>\n        );\n    }\n}\n\nrenderInput=({input,label,meta}) =>{\n    const className =`field ${meta.error && meta.touched ? 'error' :''}`;\n    return(\n        <div className={className}>\n            <label>{label}</label>\n            <input {...input} autoComplete=\"off\" />\n            {this.renderError(meta)}\n        </div>\n    );\n\n};\n\nonSubmit(formValues){\n        console.log(formValues);\n        }\n\n\n    render(){\n        return (\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\n                <Field name=\"title\" component={this.renderInput} label=\"Enter title\" />\n                <Field name=\"description\" component={this.renderInput} label=\"Enter description\" />\n                <button className=\"ui button primary\">Submit</button>\n            </form>\n        );\n    }\n}\n\nconst validate=formValues=>{\n    const error={};\n    if(!formValues.title){\n        clearSubmitErrors.title='You must enter title';\n    }\n    if(!formValues.description){\n        clearSubmitErrors.description='You must enter description';\n    }\n    return errors;\n};\n\nconst formWrapped= reduxForm({\n    form:'streamCreate',\n    validate\n}) (StreamCreate);\n\nexport default connect()"]},"metadata":{},"sourceType":"module"}